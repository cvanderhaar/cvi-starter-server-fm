<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="main" basedir=".">
	<description>
		NOTE: This file is only for GHE
		Overwrite the dest repo content with the 
	</description>

	<property file="_ghe_copy_repo.properties"/>
	<!-- 1. provide credentials in _ghe_copy_repo.properties
	# src (dev)
	src.user=<ghe user>
	src.pass=<ghe pass>
	
	# destination (mirror)
	dest.user=<ghe user>
	dest.pass=<ghe pass>
	-->
	<!-- 2. or define properties here
	<property name="src.user" value=""/>
	<property name="src.pass" value=""/>
	<property name="dest.user" value=""/>
	<property name="dest.pass" value=""/>
	-->
	
	<tstamp>
		<format property="TAG_NAME" pattern="yyyyMMdd_HHmm" locale="en" timezone="Etc/GMT-9"/>
	</tstamp>
	
	<property name="src.url" value="https://github.ibm.com/Watson-IoT/iota-starter-server-fleetmanagement"/>
	<property name="src.opts" value="--depth 1 -b release --single-branch"/>
	<property name="src.clone" location="_tmp.src_clone.${TAG_NAME}"/>
	
	<property name="dest.url" value="https://github.ibm.com/Watson-IoT/iota-starter-server-fleetmanagement"/>
	<property name="dest.opts" value="-b mirror --single-branch"/>
	<property name="dest.clone" location="_tmp.dest_clone.${TAG_NAME}"/>
	
	<!-- ================================= 
          target: main              
         ================================= -->
	<target name="main-saas" depends="" description="copy source to mirror for saas">
		<echo>Start copying repo for SaaS environment...</echo>
		<antcall target="main">
			<param name="src.clone" location="_tmp.src_clone.saas.${TAG_NAME}"/>
		    <param name="dest.opts" value="-b mirror-saas --single-branch" />
		    <param name="dest.clone" value="_tmp.dest_clone.saas.${TAG_NAME}" />
			<param name="env.saas" value="true"/>
		</antcall>
	</target>
	<target name="main" depends="" description="description">
		<echo>Start copying repo w/ tag ${TAG_NAME}...</echo>
		<antcall target="git.clone">
			<param name="repo.url" value="${src.url}"/>
			<param name="repo.user" value="${src.user}"/>
			<param name="repo.pass" value="${src.pass}"/>
			<param name="repo.opts" value="${src.opts}"/>
			<param name="repo.clone" value="${src.clone}"/>
		</antcall>
		<antcall target="git.clone">
			<param name="repo.url" value="${dest.url}"/>
			<param name="repo.user" value="${dest.user}"/>
			<param name="repo.pass" value="${dest.pass}"/>
			<param name="repo.opts" value="${dest.opts}"/>
			<param name="repo.clone" value="${dest.clone}"/>
		</antcall>

		<antcall target="copy_contents"/>
		<antcall target="push_contents"/>
		
		<!--
		<echo>Cleaning up tmp...</echo>
		<delete dir="${src.clone}"/>
		<delete dir="${dest.clone}"/>
		-->
		<echo>Done.</echo>
	</target>

	<target name="commit_contents" depends="stage_contents" if="contents_changed">
		<echo>Tagging source</echo>
		<exec executable="git" dir="${src.clone}" failonerror="true">
			<arg line="tag -a"/>
			<arg value="${TAG_NAME}"/>
			<arg line="-m"/>
			<arg value="Version ${TAG_NAME}"/>
		</exec>
		<echo>Commiting the changes...</echo>
		<exec executable="git" dir="${dest.clone}" failonerror="true">
			<arg line="commit -m"/>
			<arg value="${TAG_NAME}"/>
		</exec>
	</target>
	
	<target name="push_contents" depends="commit_contents" unless="${nopush}">
		<exec executable="git" dir="${src.clone}">
			<arg line="push origin ${TAG_NAME}"/>
		</exec>
		<echo>Pushing the changes...</echo>
		<exec executable="git" dir="${dest.clone}" failonerror="true">
			<arg line="push"/>
		</exec>
		<echo>Destination repo is updated with the content tagged as ${TAG_NAME}.</echo>
	</target>

	<target name="stage_contents">
		<echo>Staging changes...</echo>
		<exec executable="git" dir="${dest.clone}" failonerror="true">
			<arg line="add --all ."/>
		</exec>
		<exec executable="git" dir="${dest.clone}" failonerror="false" resultproperty="gitindexresult">
			<arg line="diff-index --quiet --cached HEAD"/>
		</exec>
		<echo>  Flag if there are staged chagnges: ${gitindexresult}</echo>
		<script language="javascript">
			var r = project.getProperty("gitindexresult");
			if(r != 0){
				project.setProperty("contents_changed", true);
			}
		</script>
	</target>

	<target name="copy_contents">
		<!-- check repos -->
		<antcall target="check.clone">
			<param name="repo.clone" value="${src.clone}"/>
		</antcall>
		<antcall target="check.clone">
			<param name="repo.clone" value="${dest.clone}"/>
		</antcall>

		<!-- delete all in target -->
		<delete>
			<fileset dir="${dest.clone}">
				<include name="**/*"/>
				<exclude name="**/.project"/>
			</fileset>
			<fileset dir="${dest.clone}" defaultexcludes="no">
				<include name="**/.gitignore"/>
			</fileset>
		</delete>
		
		<!-- add all files to target -->
		<copy todir="${dest.clone}" overwrite="true" includeEmptyDirs="false">
			<fileset dir="${src.clone}">
				<include name="**/*"/>
				<!-- exclude files only for GHE -->
				<exclude name="**/_ghe*"/>
				<exclude name="**/_ghe*/**/*"/>
				<exclude name="**/.project"/>
				<exclude name="**/.vscode"/>
				<exclude name="**/.vscode/**/*"/>
				<exclude name="**/_generate_deploy_files.sh"/>
				<exclude name="**/_deploy_create_services.sh.template"/>
				<exclude name="**/manifest.yml.template"/>
				<!-- exclude fonts for monitoring console -->
				<exclude name="webclient/css/font--*"/>
				<exclude name="webclient/fonts/*/*"/>
				<!-- exclude saas files -->
				<exclude name="**/manifest_For_SaaS.yml"/>
				<exclude name="**/README_For_SaaS.md"/>
				<exclude name="**/plugins" unless="env.saas"/>
				<exclude name="**/plugins/**/*" unless="env.saas"/>
				<exclude name="**/driverInsights/alertrules/*.xml" unless="env.saas"/>
 				<exclude name="**/driverInsights/alertrules/*.js" if="env.saas"/>
			</fileset>
			<fileset dir="${src.clone}" defaultexcludes="no">
				<!-- include files from default excludes (? .gitattributes, .gitmodules)
    				@see https://ant.apache.org/manual/dirtasks.html
    			 -->
				<include name="**/.gitignore"/>
			</fileset>
		</copy>
		
		<antcall target="copy_env_specific_contents" />
	</target>

	<target name="copy_env_specific_contents" depends="" if="env.saas">
		<!-- copy saas specific files --> 
		<copy tofile="${dest.clone}/manifest.yml" overwrite="true" file="manifest_For_SaaS.yml" />
		<copy tofile="${dest.clone}/README.md" overwrite="true" file="README_For_SaaS.md" />
	</target>

	<!-- check if "repo.clone" is a valid clone repo -->
	<target name="check.clone">
		<available type="dir" file="${repo.clone}/.git" property="clone_valid" />
		<fail unless="clone_valid" message="The clone ${repo.clone} is not a Git repository."/>
	</target>

	<target name="git.clone">
		<echo>Cloning repo ${repo.url} to ${repo.clone}...</echo>
		<fail unless="repo.url" />
		<fail unless="repo.clone" />
		<property name="repo.opts" value=""/>
		<!-- default options -->
		<script language="javascript">
			var repo = project.getProperty("repo.url");
			var user = project.getProperty("repo.user");
			var pass = project.getProperty("repo.pass");
			var auth = '' + (user ? user : '') + (pass ? ':'+pass : '');
			if(auth){
				repo = repo.replace('://', '://' + auth + '@');
			}
			project.setProperty("_repo", repo);
		</script>
		<exec executable="git" failonerror="true">
			<arg value="clone"/>
			<arg line="${repo.opts}"/>
			<arg value="${_repo}"/>
			<arg path="${repo.clone}"/>
		</exec>
	</target>

</project>
